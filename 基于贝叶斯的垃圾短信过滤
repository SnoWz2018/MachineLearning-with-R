# 收集数据
# http://www.dt.fee.unicamp.br/~tiago/smsspamcollection/ 数据要进行预处理，便于分析

 sms_raw <- read.csv(file.choose(),stringsAsFactors=FALSE,quote="")                    # 手动添加header,排除's 这种文本被视为引，而不可读
 str(sms_raw)                                                                          # 检查下结构
 table(sms_raw$type)
 
 install.packages("tm")
 library(tm)                                                                           # 安装并加载文本挖掘添加包tm

 sms_corpus <- Corpus(VectorSource(sms_raw$text))                                      # 建立一个包含训练数据中短信的语料库
 print(sms_corpus)
 inspect(sms_corpus)                                                                   # 查看语料库
   
 corpus_clean <- tm_map(sms_corpus,tolower)                                            # 全部小写 函数tm_map
 corpus_clean <- tm_map(corpus_clean,removeNumbers)                                    # 去除所有数字
 corpus_clean <- tm_map(corpus_clean,removeWords,stopwords())                          # 停用词
 corpus_clean <- tm_map(corpus_clean,removePunctuation)                                # 去除标点符号
 corpus_clean <- tm_map(corpus_clean,stripWhitespace)                                  # 去除上面步骤后 剩下的空格
 
 sms_dtm <- DocumentTermMatrix(corpus_clean)                                           # 语料库标记化，返回稀疏矩阵
 
 # 数据准备
 sms_raw_train <- sms_raw[1:4169,]
 sms_raw_test <- sms_raw[4170:5574,]
 sms_dtm_train <- sms_dtm[1:4169,]
 sms_dtm_test <- sms_dtm[4170:5574,]
 sms_corpus_train <- corpus_clean[1:4169]
 sms_corpus_test <- corpus_clean[4170:5574]
 
 prop.table(table(sms_raw_train$type)
 prop.table(table(sms_raw_test$type)                                                   # 测试
 
 install.packages("wordcloud")
 library(wordcloud)                                                                    # 可视化文本数据：词云
 
 wordcloud(sms_corpus_train,min.freq = 40, random.order=FALSE)                         # 创建词云，最小频数这里设为40，可调
 
 spa <- subset(sms_raw_train,type=="spa")                                              # 垃圾短信
 ham <- subset(sms_raw_train,type=="ham")                                              # 非垃圾短信
 
 wordcloud(spa$text,max.words=40,scale=c(3,0.5))
 wordcloud(ham$text,max.words=40,scale=c(3,0.5))

 findFreqTerms(sms_dtm_train,5)                                                        # 至少出现5次
                                                                                       # tm version 0.5-10之后，Dictionary()就被移除了
 sms_train <- DocumentTermMatrix(sms_corpus_train)                                     # 创建稀疏矩阵
 sms_test <- DocumentTermMatrix(sms_corpus_test)
 
 convert_counts <- function(x){                                                        # 将计数转换成因子Yes or No
   x <- ifelse(x>0,1,0)
   x <- factor(x,levels=c(0,1),labels=c("No","Yes"))
   return (x)
   
 }
 
 sms_train <- apply(sms_train,MARGIN=2,convert_counts)                                 # apply(),作用函数于矩阵的一个行或一个列
 sms_test <- apply(sms_train,MARGIN=2,convert_counts)
 
 # 基于数据训练模型
 install.packages("e1071")                                                             # 使用该添加包中的朴素贝叶斯算法
 library(e1071)
 
 sms_classifier <- naiveBayes(sms_train,sms_raw_train$type)                            # 创建一个用于预测的分类器对象
 sms_test_pred <- predict(sms_classifier,sms_test)
 
 library(gmodels)
 CrossTable(sms_test_pred,sms_raw_test$type,prop.chisq=FALSE,prop.t=FALSE,dnn=c('predicted','actual'))
 
 sms_classifier2 <- naiveBayes(sms_train,sms_raw_train$type,laplace=1)
 sms_test_pred2 <- predict(sms_classifier2,sms_test)
 
 CrossTable(sms_test_pred2,sms_raw_test$type,prop.chisq=FALSE,prop.t=FALSE,prop.r=FALSE,dnn=c('predicted','actual'))
 
 
